#!/usr/bin/env python
import argparse
import logging
import os
import time
import traceback

from tqdm.auto import tqdm

from peoplefinder.SendData import send_text_data, send_image_data
from peoplefinder.common import login
from peoplefinder.csvcompat import getPhonesAndNames

_HOME_ = os.getenv('userprofile')
_SAVEDIR_ = os.path.join(_HOME_, 'peoplechatter')


def routine(driver, sourcefile, procedure, imgsource=None, msg=''):
    """Performs sending media to WhatsApp contacts"""
    names, phones = getPhonesAndNames(sourcefile)
    if procedure == 't':
        for phone in tqdm(phones):
            assert (type(phone) == str)
            assert (len(phone) in (10, 11))
            ddd, number = phone[:2], phone[2:]
            phone = '55{0}{1}'.format(ddd, number)
            send_text_data(driver, phone, msg)
    elif procedure == 'i':
        for phone in tqdm(phones):
            assert (type(phone) == str)
            assert (len(phone) in (10, 11))
            ddd, number = phone[:2], phone[2:]
            phone = '55{0}{1}'.format(ddd, number)
            send_image_data(driver, phone, imgsource, msg)


parser = argparse.ArgumentParser(description='send data to whatsapp contacts')
parser.add_argument(
    '-s', '--source',
    dest='source',
    default=os.path.join(_SAVEDIR_, 'Contacts.xls'),
    help='path of source to contacts',
    type=str,
)
parser.add_argument(
    '-db', '--debug',
    dest='debug',
    default=False,
    help='show browser while sending text/media'
)
parser.add_argument(
    '-m', '--mode',
    dest='mode',
    default='t',
    help='send text or image with/without label',
    type=str,
)
parser.add_argument(
    '-i', '--image',
    dest='image',
    default=os.path.join(_SAVEDIR_, 'testing.png'),
    help='path of image',
    type=str,
)
parser.add_argument(
    '-t', '--stream',
    dest='stream',
    default=os.path.join(_SAVEDIR_, 'stream.txt'),
    help='path of text to stream',
)

args = parser.parse_args()

driver = login(args.debug)
with open(args.stream) as stream_media:
    msg = stream_media.read()
try:
    start = time.time()
    routine(driver, args.source, args.mode, args.image, msg)
    end = time.time()
    print('Total execution time (s): {}'.format(int(end - start)))
except Exception:
    logging.error(traceback.format_exc())
finally:
    driver.close()
    print('Driver closed')
